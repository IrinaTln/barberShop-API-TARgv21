//SQL query to get bookted time by id_barber

Select bookingDate, bookingTime, id_barber
From bookings
Where id_barber=1 and bookingDate > (NOW() - INTERVAL 1 WEEK)
group by bookingDate;


SELECT barbers.barberName, bookings.id_booking, bookings.bookingDate, 
			  bookings.bookingTime, services.serviceName
              FROM barbers
              JOIN bookings ON barbers.id_barber = bookings.id_booking
              JOIN services ON barbers.id_barber = services.id_service
			  group by bookings.bookingDate;


SELECT barbers.barberName, bookings.bookingDate, 
			  bookings.bookingTime, services.serviceName
              FROM barbers
              JOIN bookings ON barbers.id_barber = bookings.id_booking
              JOIN services ON barbers.id_barber = services.id_service
              Where barbers.id_barber=bookings.bookingDate
			  group by bookings.bookingDate;


SELECT id_booking, bookingDate, bookingTime, barbers.barberName
FROM bookings
LEFT JOIN barbers ON id_booking = barbers.id_barber
group by bookingDate;

SELECT id_booking, bookingDate, bookingTime, barbers.barberName, services.serviceName
FROM bookings
LEFT JOIN barbers ON id_booking = barbers.id_barber
LEFT JOIN services ON id_booking=services.id_service


SELECT bookings.id_booking, bookings.bookingDate, 
bookings.bookingTime, services.serviceName, 
barbers.barberName 
FROM bookings 
JOIN services ON bookings.id_service = services.id_service 
JOIN barbers ON bookings.id_barber = barbers.id_barber 
ORDER BY `bookings`.`bookingTime` DESC

SELECT bookings.bookingDate, 
              bookings.bookingTime, barbers.barberName
              FROM bookings
              JOIN barbers ON bookings.id_barber = barbers.id_barber


SELECT bookings.bookingDate, 
              bookings.bookingTime, barbers.barberName
              FROM bookings
              JOIN barbers ON bookings.id_barber = barbers.id_barber
              WHERE barbers.id_barber = 2


exports.getById = async (req, res) =>{
    const sql = `SELECT bookings.bookingDate, 
                bookings.bookingTime, barbers.barberName
                FROM bookings
                JOIN barbers ON bookings.id_barber = barbers.id_barber
                WHERE barbers.id_barber = '?';`
    const sqlResult = await db.sequelize.query(sql, { type: QueryTypes.SELECT })
    if (sqlResult.length === 0) {
        res.send({ error: "No barbers stored." })
    return
    }
    res.send(sqlResult)
}

//Самый первый вариант метода getAll для bookingController
/*exports.getAll = async (req, res) => {
    try {
      const bookings = await Bookings.findAll({
        include: [
          { model: Customer, as: 'Customer'},
          { model: Service, as: 'Service'},         
          { model: Barber, as: 'Barber'},
        ],
      });
      res.send(JSON.stringify(bookings));
    } catch (error) {
      res.status(500).send({"message": "Ira, there is an error"});
    }
  }; */

  //Самый первый вариант методя getById для barberController
  exports.getById = async (req, res) =>{
    const barber = await Barbers.findByPk(req.params.id_barber)
    if(barber === null){
        res.status(404).send({"error": "No barber found"})
    } else {
        res.send(barber)
    }
}