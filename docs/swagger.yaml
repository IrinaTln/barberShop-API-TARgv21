openapi: 3.0.2
info:
    title: barberShop-API-TARgv21
    version: 1.0.0
    description: >-
        ### This is a Swagger UI for our BarberShop API  \n\n### Error handling\nErrors are presented using
        the HTTP status codes 400-599. The response include a more detailed explanation about the error in the
        body.\n\n```\n{\n  \"error\": \"Cleartext explanation of the error that occurred\"\n}\n```\n\n###
        Generic API errors\nThese error responses can be returned by any of the described endpoints.\n\n| HTTP
        status  |  Description |\n|---|---|\n| 400| Bad input parameters or invalid request. More information
        can be found in the response body.\n| 401| The consumer does not have access to the requested resource
        or the provided token is not valid.\n| 404| The requested resource can not be found or the user does
        not have access to the resource.\n| 5XX| A server error has occurred while processing the request."
           
paths:
    /services:
        get:
            tags:
                - services
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: string
                            examples:
                                List of sevices:
                                    value:
                                        - Hair-cut
                                        - Beard-trimming
                                        - Hair-cut + beard+trimming
                    description: Returns the list of services
            summary: Get the list of all services
            description: Reterns the list of all services in API
        post:
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Service'
                required: true
            tags:
                - services
            responses:
                '201':
                    headers:
                        Location:
                            schema:
                                type: string
                            examples:
                                Location of created service:
                                    value: 'https://server:port/services/{id_service}'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Service'
                    description: Service was created.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
                            examples:
                                Invalid data:
                                    value:
                                        error: 'Invalid input, missing required parametrs'
                    description: Invalid data supplied.
            summary: Add new service
            description: Add new service with all details
    /customers:
        get:
            tags:
                - customers
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: string
                            examples:
                                List of customers:
                                    value:
                                        -
                                            id_customer: 1
                                            firstName: 'James '
                                            lastName: Cameron
                                        -
                                            id_customer: 2
                                            firstName: John
                                            lastName: Travolta
                    description: Returns the list of all customers
            summary: Get the list of all customers
            description: Returns the list of all customers in API
        post:
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Customer'
                required: true
            tags:
                - customers
            responses:
                '201':
                    headers:
                        location:
                            schema:
                                type: string
                            examples:
                                Location of created customer:
                                    value: 'https://server:port/customers/{id_customer}'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Customer'
                    description: Customer was added
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
                            examples:
                                Invalid data:
                                    value:
                                        error: 'Invalid input, missing required parametrs'
                    description: Invalid data supplied
            summary: Add new customer
            description: Add new customer with all details
    '/customers/{id}':
        summary: Get customer details
        description: Get all the details of the customer with given id.
        get:
            tags:
                - customers
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: string
                            examples:
                                Custumer details:
                                    value:
                                        id_customer: 2
                                        firstName: John
                                        lastName: Travolta
                                        phone: '+37256215857'
                                        mail: travolta@gmail.com
                    description: Customer was found and the details are returned.
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
                            examples:
                                No found:
                                    value:
                                        error: Customer with given id \w+ was not found.
                    description: Customer with given id does not exist.
            summary: Get details of the customer given ID
            description: Return all the details of the customer.
        put:
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Customer'
                required: true
            tags:
                - customers
            responses:
                '200':
                    headers:
                        Location:
                            schema:
                                type: string
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Customer'
                    description: Customer was updated.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Missing required fields
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Customer not found
            summary: Update customer
        delete:
            tags:
                - customers
            responses:
                '204':
                    description: Customer deleted
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Customer not found
            summary: Delete customer
        parameters:
            -
                name: id
                description: Id of the Customer to find the details.
                schema:
                    type: integer
                in: path
                required: true
    '/services/{id}':
        summary: Get service details
        description: Get all the details of the service with given id.
        get:
            tags:
                - services
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: string
                            examples:
                                Service details:
                                    value:
                                        id_service: 2
                                        serviceName: Beard trimming
                                        servicePrice: 20
                    description: Service was found and the details are returned.
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
                            examples:
                                Not found:
                                    value:
                                        error: Service with given id \w+ was not found.
                    description: Service with given id does not exist.
            summary: Get details of the service given ID
            description: Return all the details of the service.
        parameters:
            -
                name: id
                description: Id of the Service to find the details
                schema:
                    type: integer
                in: path
                required: true
    /bookings:
        get:
            tags:
                - bookings
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Booking'
                            examples:
                                bookings:
                                    value:
                                        -
                                            id_booking: 1
                                            bookingTime: '2023-02-03T10:00:00.000Z'
                                            id_customer: 1
                                            id_service: 2
                                            id_barber: 1
                                            Customer:
                                                id_customer: 1
                                                firstName: John
                                                lastName: Cameron
                                                phone: '+372456213'
                                                mail: cameron@gmail.com
                                            Service:
                                                id_service: 2
                                                serviceName: Beard trimming
                                                servicePrice: 20
                                            Barber:
                                                id_barber: 1
                                                barberName: Marko Tasane
                                        -
                                            id_booking: 2
                                            bookingTime: '2023-01-24T10:00:00.000Z'
                                            id_customer: 2
                                            id_service: 3
                                            id_barber: 2
                                            Customer:
                                                id_customer: 2
                                                firstName: Gosha
                                                lastName: Kutsenko
                                                phone: '+3725651234'
                                                mail: kutsenko@gmail.com
                                            Service:
                                                id_service: 3
                                                serviceName: Hair cut + beard trimming
                                                servicePrice: 45
                                            Barber:
                                                id_barber: 2
                                                barberName: Pamela Anderson
                    description: Returns te list of all bokings in API
            summary: Get the list of all bookings
        post:
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Booking'
                required: true
            tags:
                - bookings
            responses:
                '200':
                    headers:
                        Location:
                            schema:
                                type: string
                            examples:
                                Location of created booking:
                                    value: 'https://server:port/bookings/{id_booking}'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Booking'
                    description: Booking was added.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
                            examples:
                                Invalid data:
                                    value:
                                        error: 'Invalid input, missing required parametrs'
                    description: Invalid data supplied
            summary: Add new booking
            description: Add new booking with all details
    '/bookings/{id}':
        summary: Get booking details
        description: Get all the details of the booking with given id.
        get:
            tags:
                - bookings
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: string
                            examples:
                                Booking details:
                                    value:
                                        id_booking: 1
                                        bookingTime: '2023-02-03T10:00:00.000Z'
                                        id_customer: 1
                                        id_service: 2
                                        id_barber: 1
                                        Customer:
                                            id_customer: 1
                                            firstName: John
                                            lastName: Cameron
                                            phone: '+372456213'
                                            mail: cameron@gmail.com
                                        Service:
                                            id_service: 2
                                            serviceName: Beard trimming
                                            servicePrice: 20
                                        Barber:
                                            id_barber: 1
                                            barberName: Marko Tasane
                    description: Booking was found and the details are returned.
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
                            examples:
                                Not found:
                                    value:
                                        error: Customer with given id \w+ was not found.
                    description: Booking with given id does not exist.
            summary: Get details of the booking given ID
            description: Return all the details of the booking.
        parameters:
            -
                name: id
                description: Id of the Booking to find the details.
                schema:
                    type: integer
                in: path
                required: true
    /barbers:
        get:
            tags:
                - barbers
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: string
                            examples:
                                barbers:
                                    value:
                                        -
                                            id_barber: 1
                                            barberName: Valentino Belucchi
                                        -
                                            id_barber: 2
                                            barberName: Marko Tasane
                                        -
                                            id_barber: 3
                                            barberName: Gretta Tunberg
                                        -
                                            id_barber: 4
                                            barberName: Pamela Anderson
                    description: Returns the list of all barbers in API
            summary: Get the all list of barbers
        post:
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Barber'
                required: true
            tags:
                - barbers
            responses:
                '201':
                    headers:
                        Location:
                            schema:
                                type: string
                            examples:
                                Location of created barber:
                                    value: 'https://server:port/barbers/{id_barber}'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Barber'
                    description: Barber was added.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
                            examples:
                                Invalid data:
                                    value:
                                        error: 'Invalid input, missing required parametrs'
                    description: Invalid data supplied.
            summary: Add new barber
            description: Add new barber with all details
    '/barbers/{id}/':
        summary: Get barber details
        description: Get all the details of the barber with given id.
        get:
            tags:
                - barbers
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: string
                            examples:
                                Full detail of a given barber.:
                                    value:
                                        id_barber: 3
                                        barberName: John Travolte
                    description: Barber was found and the details are returned
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
                            examples:
                                Not Found:
                                    value:
                                        error: Barber with given id \w+ was not found.
                    description: Barber with given id does not exist
            summary: Get details of the barber given ID
            description: Return all the details of the barber.
        parameters:
            -
                name: id
                description: Id of the Barber to find the details
                schema:
                    type: integer
                in: path
                required: true
components:
    schemas:
        Error:
            description: ''
            type: object
            example:
                error: Error message.
        Customer:
            title: Root Type for Customer
            description: Customer details
            required:
                - firstName
                - lastName
                - mail
                - phone
            type: object
            properties:
                id:
                    format: int32
                    type: integer
                firstName:
                    type: string
                lastName:
                    type: string
                phone:
                    type: string
                mail:
                    type: string
            example:
                id: 1
                firstName: John
                lastName: Cameron
                phone: '+3725478961'
                mail: cameron@gmail.com
        Barber:
            description: Barber details
            required:
                - barberName
            type: object
            properties:
                id_barber:
                    format: int32
                    description: ''
                    type: integer
                barberName:
                    description: ''
                    type: string
            example:
                id_barber: 1
                barberName: Marko Tasane
        Service:
            description: Service details
            required:
                - serviceName
                - servicePrice
            type: object
            properties:
                id_service:
                    format: int32
                    description: ''
                    type: integer
                serviceName:
                    description: ''
                    type: string
                servicePrice:
                    format: int32
                    description: ''
                    type: integer
            example:
                id_service: 2
                serviceName: Beard trimming
                servicePrice: 20
        Booking:
            description: Booking details
            required:
                - bookingTime
                - id_customer
                - id_service
                - id_barber
            type: object
            properties:
                id_booking:
                    format: int32
                    description: ''
                    type: integer
                bookingTime:
                    format: date-time
                    description: ''
                    type: string
                id_customer:
                    format: int32
                    description: ''
                    type: integer
                id_service:
                    format: int32
                    description: ''
                    type: integer
                id_barber:
                    format: int32
                    description: ''
                    type: integer
            example:
                id_booking: 2
                bookingTime: '2023-01-24T10:00:00.000Z'
                id_customer: 2
                id_service: 3
                id_barber: 2
